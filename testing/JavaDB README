Setup before running java test program:
Download & install the correct OpenSSL version for your system

Certificate & Key Creation:
Create a directory to store your keys and certificates

Create Root Certificate:
NOTE: leave out -aes-256-cbc while testing (currently does not work with this option)

Private key(PROTECT THIS)
openssl genrsa -aes-256-cbc -out ca-key.pem 2048

Self-signed Root certificate(installed on all client machines)
openssl req -x509 -new -nodes -key ca-key.pem -sha256 -days 3600 -out ca-cert.pem
EX:
US
Maryland
Columbia
UMUC
CMSC495
umuc.time.com
someemail@gmail.com

For Server:
NOTE: leave out -aes-256-cbc while testing (currently does not work with this option)

Create a private key
openssl genrsa -aes-256-cbc -out server-key.pem 2048

Create Certificate Signing Request (CSR)
openssl req -new -key server-key.pem -out server-req.pem
	For Common Name put server name.

Create signed certificate
openssl x509 -req -in server-req.pem -CA ca-cert.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -days 500 -sha256
EX:
US
Maryland
Columbia
UMUC
CMSC495
server-name
someemail@gmail.com


For each User (DONE ONCE when hired):
NOTE: leave out -aes-256-cbc while testing (currently does not work with this option)

Create a private key
openssl genrsa -aes-256-cbc -out name-key.pem 2048
(User must remember password)

Create Certificate Signing Request (CSR)
openssl req -new -key name-key.pem -out name-req.pem
	For Common Name put employees ID (ex: jrmullins).

Create signed certificate
openssl x509 -req -in name-req.pem -CA ca-cert.pem -CAkey ca-key.pem -CAcreateserial -out name-cert.pem -days 500 -sha256
EX:
US
Maryland
Columbia
UMUC
CMSC495
empID
someemail@gmail.com

Keystore and Truststore Creation

The truststore should be generated on a secure central server (not locally).
The keystore will be generated in the users profile.

Create pkcs12 file and keystore:
Convert x509 Certificate and Key to a pkcs12 file
openssl pkcs12 -export -in name-cert.pem -inkey name-key.pem -out name.p12 -name [some-alias] -CAfile ca-cert.pem -caname root

Note: Make sure you put a password on the p12 file
Research -chain option which preserves the full certificate chain.

Convert the pkcs12 file to a java keystore
keytool -importkeystore -deststorepass [somepassword] -destkeypass [somepassword] -destkeystore client.keystore -srckeystore name.p12 -srcstoretype PKCS12 -srcstorepass anotherpassword -alias [some-alias]


Other References:

Connector/J Download (I happened to download the development release 6.0.6) - unzip when you create your java project add the jar to your library
https://dev.mysql.com/downloads/connector/j/5.1.html

keystore/truststore Setup
https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-using-ssl.html

JDBC URL Format
https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-configuration-properties.html

Examples:
https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-usagenotes-connect-drivermanager.html
https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-usagenotes-statements.html#connector-j-examples-execute-select

EDIT THE PATHS IN THE JavaDB test program so that they point to the correct folders on your system.
